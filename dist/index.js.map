{"version":3,"sources":["../src/index.js"],"names":["require","grpc","protoLoader","CryptoJS","createClient","promisify","QRLPROTO_SHA256","tmp","fs","util","readFile","writeFile","PROTO_PATH","__dirname","includes","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","console","log","checkProtoHash","file","then","contents","protoFileWordArray","lib","WordArray","create","toString","calculatedProtoHash","SHA256","enc","Hex","verified","forEach","value","protoHash","loadGrpcBaseProto","grpcEndpoint","load","packageDefinition","loadPackageDefinition","packageObject","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","grpcObject","grpcObjectString","JSON","stringify","protoObjectWordArray","calculatedObjectHash","objectHash","protoPath","packageName","serviceName","makeClient","proto","validHash","QrlNode","ipAddress","port","version","connection","apiCall","path","substr","request","module","exports"],"mappings":"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","sourcesContent":["require('@babel/polyfill')\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst CryptoJS = require('crypto-js')\nconst { createClient } = require('grpc-js-kit')\nconst { promisify } = require('util')\nconst { QRLPROTO_SHA256 } = require('@theqrl/qrl-proto-sha256')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nlet PROTO_PATH = __dirname + '/../node_modules/@theqrl/qrlbase.proto/qrlbase.proto'\nif (__dirname.includes('/node_modules/')) {\n  PROTO_PATH = __dirname + '/../../qrlbase.proto/qrlbase.proto'\n}\nlet qrlClient = null\n\nfunction clientGetNodeInfo (client) {\n  try {\n    return new Promise((resolve, reject) => {\n      client.getNodeInfo({}, (error, response) => {\n        if (error) {\n          reject(error)\n        }\n        resolve(response)\n      })\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nfunction checkProtoHash(file) {\n  return readFile(file).then(contents => {\n    // console.log(contents)\n    const protoFileWordArray = CryptoJS.lib.WordArray.create(contents.toString())\n    const calculatedProtoHash = CryptoJS.SHA256(protoFileWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.protoHash) {\n        if (value.protoHash === calculatedProtoHash) {\n          verified = true\n        }\n      }\n    })\n    return verified\n  })\n}\n\nfunction loadGrpcBaseProto(grpcEndpoint) {\n    return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n      try {\n        const packageObject = await grpc.loadPackageDefinition(packageDefinition)\n        const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n        // console.log(client)\n        const res = await clientGetNodeInfo(client)\n        const qrlProtoFilePath = tmp.fileSync({\n          mode: '0644',\n          prefix: 'qrl-',\n          postfix: '.proto'\n        }).name\n        writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n          if (fsErr) {\n            console.log('tmp filesystem error')\n          }\n        })\n        return(qrlProtoFilePath)\n      } catch (error) {\n        console.log('Unable to load grpc base proto (' + error + ')')\n      }\n    })\n}\n\nasync function loadGrpcProto(protofile, endpoint) {\n  try {\n    const options = {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n    }\n    const packageDefinition = await protoLoader.load(protofile, options)\n    const grpcObject = grpc.loadPackageDefinition(packageDefinition)\n    const grpcObjectString = JSON.stringify(grpcObject.qrl)\n    const protoObjectWordArray = CryptoJS.lib.WordArray.create(grpcObjectString)\n    const calculatedObjectHash = CryptoJS.SHA256(protoObjectWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.objectHash) {\n        if (value.objectHash === calculatedObjectHash) {\n          verified = true\n        }\n      }\n    })\n    // If the grpc object shasum matches, establish the grpc connection.\n    if (verified) {\n      qrlClient = await createClient({\n        protoPath: protofile,\n        packageName: 'qrl',\n        serviceName: 'PublicAPI',\n        options: {\n          keepCase: true,\n          longs: String,\n          enums: String,\n          defaults: true,\n          oneofs: true,\n        },\n      }, endpoint)\n      return qrlClient\n    }\n  } catch (error) {\n    console.log('Unable to load grpc proto file (' + error + ')')\n  }\n}\n\nasync function makeClient(grpcEndpoint) {\n  try {\n    const proto = await loadGrpcBaseProto(grpcEndpoint)\n    if (proto) {\n      const validHash = await checkProtoHash(proto)\n      if (validHash) {\n        const client = await loadGrpcProto(proto, grpcEndpoint)\n        return client\n      }\n    }\n    return null\n  } catch (error) {\n    console.log('Unable to make client (' + error + ')')\n  }\n}\n\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.5.5'\n    this.connection = false\n    this.client = null\n    this.ipAddress = ipAddress\n    this.port = port\n  }\n\n  connect() {\n    try {\n      return new Promise(async (resolve, reject) => {\n        if (this.connection === false) {\n          const client = await makeClient(`${this.ipAddress}:${this.port}`)\n          if (client === null) {\n            this.connection = false\n          } else {\n            this.connection = true\n          }\n          this.client = client\n          resolve(client)\n        }\n        reject('Already connected... disconnect first or create a new connection')\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  async validApi(apiCall) {\n    try {\n      const client = await this.client\n      if (client[apiCall].path.substr(0, 5) === '/qrl.') {\n        return true\n      }\n      return false\n    } catch (error) {\n      return false\n    }\n  }\n\n  async api(apiCall, request = {}) {\n    try {\n      return new Promise(async (resolve, reject) => {\n        const client = await this.client\n        client[apiCall](request, async (error, response) => {\n          if (error) {\n            reject(error)\n          }\n          resolve(response)\n        })\n      })\n    } catch (error) {\n      console.log('Unable to make API call (' + error + ')')\n    }\n  }\n}\n\nmodule.exports = QrlNode"],"file":"index.js"}