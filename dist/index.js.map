{"version":3,"sources":["../src/index.js"],"names":["require","grpc","protoLoader","CryptoJS","createClient","promisify","QRLPROTO_SHA256","tmp","fs","util","readFile","writeFile","dns","promises","PROTO_PATH","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","Error","checkProtoHash","file","then","contents","protoFileWordArray","lib","WordArray","create","toString","calculatedProtoHash","SHA256","enc","Hex","verified","forEach","value","protoHash","loadGrpcBaseProto","grpcEndpoint","load","packageDefinition","packageObject","loadPackageDefinition","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","grpcObject","grpcObjectString","JSON","stringify","protoObjectWordArray","calculatedObjectHash","objectHash","protoPath","packageName","serviceName","makeClient","proto","validHash","validate","node","lookup","QrlNode","ipAddress","port","version","connection","err","console","log","apiCall","path","substr","request","module","exports"],"mappings":"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","sourcesContent":["require(\"@babel/polyfill\")\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst CryptoJS = require('crypto-js')\nconst {\n  createClient\n} = require('grpc-js-kit')\nconst {\n  promisify\n} = require('util')\nconst {\n  QRLPROTO_SHA256\n} = require('@theqrl/qrl-proto-sha256')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nconst dns = require('dns').promises\nconst PROTO_PATH = 'node_modules/@theqrl/qrlbase.proto/qrlbase.proto'\nlet qrlClient = null\n\nasync function clientGetNodeInfo (client) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await client.getNodeInfo({}, (error, response) => {\n        if (error) {\n          throw new Error(error)\n        }\n        resolve(response)\n      })\n    } catch (error) {\n      throw new Error(error)\n    }\n  }).catch(error => {\n    throw new Error('Unable to get valid proto file (' + error + ')')\n  })\n}\n\nasync function checkProtoHash(file) {\n  return readFile(file).then(async contents => {\n    const protoFileWordArray = CryptoJS.lib.WordArray.create(contents.toString())\n    const calculatedProtoHash = CryptoJS.SHA256(protoFileWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.protoHash) {\n        if (value.protoHash === calculatedProtoHash) {\n          verified = true\n        }\n      }\n    })\n    return verified\n  })\n}\n\nasync function loadGrpcBaseProto(grpcEndpoint) {\n  return new Promise((resolve, reject) => {\n    return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n      try {\n        const packageObject = grpc.loadPackageDefinition(packageDefinition)\n        const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n        const res = await clientGetNodeInfo(client)\n        const qrlProtoFilePath = tmp.fileSync({\n          mode: '0644',\n          prefix: 'qrl-',\n          postfix: '.proto'\n        }).name\n        await writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n          if (fsErr) {\n            reject('tmp filesystem error')\n          }\n        }).catch(error => {\n          // throw new Error('Unable to load grpc base proto (' + error + ')')\n        })\n        resolve(qrlProtoFilePath)\n      } catch (error) {\n        throw new Error('Unable to load grpc base proto (' + error + ')')\n      }\n    })\n  }).catch(error => {\n    throw new Error('Unable to load grpc base proto (' + error + ')')\n  })\n}\n\nasync function loadGrpcProto(protofile, endpoint) {\n  try {\n    const options = {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n    }\n    const packageDefinition = await protoLoader.load(protofile, options)\n    const grpcObject = await grpc.loadPackageDefinition(packageDefinition)\n    const grpcObjectString = JSON.stringify(grpcObject.qrl)\n    const protoObjectWordArray = CryptoJS.lib.WordArray.create(grpcObjectString)\n    const calculatedObjectHash = CryptoJS.SHA256(protoObjectWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.objectHash) {\n        if (value.objectHash === calculatedObjectHash) {\n          verified = true\n        }\n      }\n    })\n    // If the grpc object shasum matches, establish the grpc connection.\n    if (verified) {\n      qrlClient = await createClient({\n        protoPath: protofile,\n        packageName: 'qrl',\n        serviceName: 'PublicAPI',\n        options: {\n          keepCase: true,\n          longs: String,\n          enums: String,\n          defaults: true,\n          oneofs: true,\n        },\n      }, endpoint)\n      return qrlClient\n    }\n  } catch (error) {\n    throw new Error('Unable to load grpc proto file (' + error + ')')\n  }\n}\n\nasync function makeClient(grpcEndpoint) {\n  try {\n    const proto = await loadGrpcBaseProto(grpcEndpoint)\n    const validHash = await checkProtoHash(proto)\n    if (validHash) {\n      const client = await loadGrpcProto(proto, grpcEndpoint)\n      return client\n    }\n    return null\n  } catch (error) {\n    throw new Error('Unable to make client (' + error + ')')\n  }\n}\n\nasync function validate(node) {\n  return dns.lookup(node)\n}\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.5.2'\n    this.connection = false\n    this.client = null\n    this.ipAddress = ipAddress\n    this.port = port\n    validate(ipAddress).then((err, res) => {\n      if (err) {\n        return false\n      }\n      return true\n    }).catch(error => {\n      console.log(error)\n    })  \n  }\n\n  async connect() {\n    return new Promise(async (resolve, reject) => {\n      if (this.connection === false) {\n        const client = await makeClient(`${this.ipAddress}:${this.port}`)\n        this.connection = true\n        this.client = client\n        resolve(client)\n      }\n      reject('Already connected... disconnect first or create a new connection')\n    })\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  async validApi(apiCall) {\n    const client = await this.client\n    try {\n      if (client[apiCall].path.substr(0, 5) === '/qrl.') {\n        return true\n      }\n      return false\n    } catch (error) {\n      return false\n    }\n  }\n\n  api(apiCall, request = {}) {\n    return new Promise(async (resolve, reject) => {\n      const client = await this.client\n      client[apiCall](request, async (error, response) => {\n        if (error) {\n          reject(error)\n        }\n        resolve(response)\n      })\n    }).catch(error => {\n      throw new Error('Unable to make API call (' + error + ')')\n    })\n  }\n\n}\n\nmodule.exports = QrlNode"],"file":"index.js"}