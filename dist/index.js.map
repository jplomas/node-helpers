{"version":3,"sources":["../src/index.js"],"names":["require","grpc","protoLoader","createClient","promisify","tmp","fs","util","readFile","writeFile","PROTO_PATH","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","loadGrpcBaseProto","grpcEndpoint","load","then","packageDefinition","packageObject","loadPackageDefinition","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","TypeError","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","grpcObject","verified","protoPath","packageName","serviceName","console","log","makeClient","proto","QrlNode","ipAddress","port","version","connection","apiCall","result","path","substr","request","module","exports"],"mappings":"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","sourcesContent":["require(\"@babel/polyfill\")\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst {createClient} = require('grpc-js-kit')\nconst { promisify } = require('util')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nconst PROTO_PATH = './src/qrlbase.proto'\nlet qrlClient = null\n\nconst clientGetNodeInfo = client => {\n  return new Promise((resolve, reject) => {\n    client.getNodeInfo({}, (error, response) => {\n      if (error) {\n        reject(error)\n      }\n      resolve(response)\n    })\n  })\n}\n\nasync function loadGrpcBaseProto(grpcEndpoint) {\n  return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n    const packageObject = grpc.loadPackageDefinition(packageDefinition)\n    const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n    const res = await clientGetNodeInfo(client)\n    const qrlProtoFilePath = tmp.fileSync({mode: '0644', prefix: 'qrl-', postfix: '.proto'}).name\n    await writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n      if (fsErr) {\n        throw new TypeError('tmp filesystem error')\n      }\n    })\n    return qrlProtoFilePath\n  })\n} \n\nasync function loadGrpcProto(protofile, endpoint) {\n  const options = {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n  }\n  const packageDefinition = await protoLoader.load(protofile, options)\n  const grpcObject = await grpc.loadPackageDefinition(packageDefinition)\n  let verified = true\n  // QRLPROTO_SHA256.forEach(value => {\n  //   if (value.memoryHash === calculatedObjectHash) {\n  //     verified = true\n  //   }\n  // })\n  // If the grpc object shasum matches, establish the grpc connection.\n  if (verified) {\n    try {\n      qrlClient = createClient({\n        protoPath: protofile,\n        packageName: 'qrl',\n        serviceName: 'PublicAPI',\n        options: {\n          keepCase: true,\n          longs: String,\n          enums: String,\n          defaults: true,\n          oneofs: true,\n        },\n      }, endpoint)\n      return qrlClient\n    } catch (error) {\n      throw new TypeError(error)\n    }\n\n  }\n  console.log('Unable to verifty proto file - have hashes changed?') // eslint-disable-line no-console\n  throw new TypeError('Unable to verify proto file')\n}\n\nasync function makeClient (grpcEndpoint) {\n  const proto = await loadGrpcBaseProto(grpcEndpoint)\n  const client = await loadGrpcProto(proto, grpcEndpoint)\n  return client\n}\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.5.0'\n    this.ipAddress = ipAddress\n    this.port = port\n    this.connection = false\n    this.client = null\n  }\n  \n  connect() {\n    return new Promise((resolve, reject) => {\n      if (this.connection === false) {\n        const client = makeClient(`${this.ipAddress}:${this.port}`)\n        this.connection = true\n        this.client = client\n        resolve(client)\n      }\n      reject('Already connected... disconnect first or create a new connection')\n    })\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  validApi(apiCall) {\n    const client = this.client\n    return client.then(result => {\n      try {\n        if (result[apiCall].path.substr(0,5) === '/qrl.') {\n          return true\n        }\n        return false\n      } catch (error) {\n        return false\n      }\n    })\n  }\n\n  api(apiCall, request = {}) {\n      return new Promise(async (resolve, reject) => {\n        const client = await this.client\n        client[apiCall](request, async (error, response) => {\n          if (error) {\n            reject(error)\n          }\n          resolve(response)\n        })\n      })\n  }\n\n}\nmodule.exports = QrlNode\n"],"file":"index.js"}